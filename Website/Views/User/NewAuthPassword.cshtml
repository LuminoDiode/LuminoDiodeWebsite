@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model System.String
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container row">
	<div class="col col-md-4"></div>
	<div class="col col-md-4">
		<div class="display-4 text-center p-1">Log in</div>
		<div class="input-group input-group-xxl">
			<div class="container-fluid p-2">
				<div class="d-xl-flex justify-content-center">
					<div class="w-100">
						<label class="display-6">Password</label>
					</div>
					<div class="w-100 p-2">
						<input id="passwordInputId" class="w-100 input-group-text" type="password" />
					</div>
				</div>
				<div class="text-danger"></div>
			</div>
			<div class="container-fluid p-2">
				<input class="btn btn-sm btn-outline-dark col-12 p-2" type="submit" value="Submit" onclick="OnPasswordSubmitClick()" />
			</div>
			<div class="display-6 text-danger">@Html.Encode(Model)</div>
		</div>
	</div>
	<div class="col col-md-4"></div>
</div>

<script src="~/JS/sha512.js"></script>
<script>
	function getCookie(name) {
		var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
		if (match) return match[2];
	}
	function ToCommonBase64(str) {
		return ((str + '='.repeat(4 - (str.length % 4))).replaceAll('-', '+').replaceAll('_', '/'));
	}
	function ToUrlBase64(str) {
		return (str.replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', ''));
	}
	function BufToBase64(bufferArray) {
		return btoa(String.fromCharCode.apply(null, new Uint8Array(bufferArray)));
	}
	function Base64ToBuf(str64) {
		return Uint8Array.from(atob(str64), c => c.charCodeAt(0));
	}

	function OnPasswordSubmitClick() {
		PasswordSalt64 = ToCommonBase64(getCookie(@Html.Raw('\''+Website.Controllers.UserController.PasswordSaltString64+'\'')));
		AuthSalt64 = ToCommonBase64(getCookie(@Html.Raw('\''+Website.Controllers.UserController.AuthHashKeyString64+'\'')));
		console.log("PasswordSalt64 = " + PasswordSalt64);
		console.log("AuthSalt64 = " + AuthSalt64);

		var PasswordSaltBytes = Base64ToBuf(PasswordSalt64);
		var AuthSaltBytes = Base64ToBuf(AuthSalt64);
		console.log("PasswordSaltBytes = " + PasswordSaltBytes);
		console.log("AuthSaltBytes = " + AuthSaltBytes);

		var UserPasswordBytes = new Uint8Array(new TextEncoder().encode(document.getElementById("passwordInputId").value));
		console.log("user password bytes = " + UserPasswordBytes);


		var Salted = Array.prototype.concat.apply([...UserPasswordBytes, ...PasswordSaltBytes]);
		console.log("Salted = " + Salted);

		var SaltedHashed = sha512.array(Salted);
		console.log("SaltedHashed = " + SaltedHashed);

		var SaltedHashedWithKey = Array.prototype.concat.apply([...SaltedHashed, ...AuthSaltBytes]);
		console.log("SaltedHashedWithKey = " + SaltedHashedWithKey);

		var SaltedHashedWithKeyHashed = sha512.array(SaltedHashedWithKey);
		console.log("SaltedHashedWithKeyHashed = " + SaltedHashedWithKeyHashed);

		var AsBase64url = ToUrlBase64(BufToBase64(SaltedHashedWithKeyHashed));
		console.log("SaltedHashedWithKeyHashed as base64 = " + AsBase64url);


		var Req = new XMLHttpRequest();
		Req.open('POST', '/User/NewAuthPassword', false);
		Req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
		Req.send('@Html.Raw(Website.Controllers.UserController.PasswordHashedByClientFormName)' + "=" + AsBase64url);
		document.open();
		document.write(Req.responseText);
		document.close();
	}
</script>