@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model System.String
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container row">
	<div class="col col-md-4"></div>
	<div class="col col-md-4">
		<div class="display-4 text-center p-1">Log in</div>
		<div class="input-group input-group-xxl">
			<div class="container-fluid p-2">
				<div class="d-xl-flex justify-content-center">
					<div class="w-100">
						<label class="display-6">Password</label>
					</div>
					<div class="w-100 p-2">
						<input id="passwordInputId" class="w-100 input-group-text" type="password" />
					</div>
				</div>
				<div class="text-danger"></div>
			</div>
			<div class="container-fluid p-2">
				<input class="btn btn-sm btn-outline-dark col-12 p-2" type="submit" value="Submit" onclick="OnPasswordSubmitClick()" />
			</div>
			<div class="display-6 text-danger">@Html.Encode(Model)</div>
		</div>
	</div>
	<div class="col col-md-4"></div>
</div>
<span id="HashedString64Password" hidden></span>

<script src='~/JS/sha512.min.js'></script>
<script src='~/JS/jquery-3.6.0.js'></script>
<script>
	function getCookie(name) {
		var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
		if (match) return match[2];
	}
	function sha512(bytes) {
        return Array.from(new Uint8Array(crypto.subtle.digest("SHA-512", bytes)));
	}
	function arrayBufferToBase64( buffer ) {
		var binary = '';
		var bytes = new Uint8Array( buffer );
		var len = bytes.byteLength;
		for (var i = 0; i < len; i++) {
			binary += String.fromCharCode( bytes[ i ] );
		}
		return window.btoa( binary );
	}
	function OnPasswordSubmitClick() {
        console.log("password entered by user: " + document.getElementById("passwordInputId").value);
		var passBytes = new TextEncoder().encode(document.getElementById("passwordInputId").value);
        console.log("passBytes.length: " + passBytes.length);
        //console.log('passedbytes:');
        //console.log(passBytes);
		var saltBytes = new Uint16Array(getCookie("PasswordSalt"));
        console.log("getCookie(PasswordSalt)"+ getCookie("PasswordSalt"));
		console.log("saltBytes.length: " + saltBytes.length);
		//console.log('PasswordSalt:');
        //console.log(saltBytes.join(' '));
		var tockenKeyBytes =new Uint16Array(getCookie("AuthHashKey"));
		console.log("getCookie(AuthHashKey)"+ getCookie("AuthHashKey"));
		console.log("tockenKeyBytes.length: " + tockenKeyBytes.length);
		//console.log('tockenKeyBytes:');
        //console.log(tockenKeyBytes.join(' '));
        //console.log(typeof (saltBytes));

		var Salted = new Uint16Array(Array.prototype.concat(passBytes, saltBytes));
        var SaltedHashed= sha512(Salted.buffer);
        var SaltedWithKey = new Uint16Array(Array.prototype.concat(SaltedHashed, tockenKeyBytes));
        var SaltedWithKeyHashed =sha512(SaltedWithKey.buffer);

        console.log(SaltedWithKeyHashed);

        console.log("passing to server: "+ arrayBufferToBase64(SaltedWithKeyHashed));

        var Req = new XMLHttpRequest();
		Req.open('POST', '/User/NewAuthPassword',false);
        Req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        Req.send(arrayBufferToBase64(SaltedWithKeyHashed));
	}
</script>